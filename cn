CRC
import java.io.*; 
class Crc
{
public static void main(String args[]) throws IOException
{
BufferedReader br=new BufferedReader(new InputStreamReader(System.in)); 
int[ ] data;
int[ ]div; 
int[ ]divisor; 
int[ ]rem;
int[ ] crc;
int data_bits, divisor_bits, tot_length;
System.out.println("Enter number of data bits : "); 
data_bits=Integer.parseInt(br.readLine()); 
data=new int[data_bits];
System.out.println("Enter data bits : "); 
for(int i=0; i<data_bits; i++)
data[i]=Integer.parseInt(br.readLine()); 
System.out.println("Enter number of bits in divisor : "); 
divisor_bits=Integer.parseInt(br.readLine()); 
divisor=new int[divisor_bits];
System.out.println("Enter Divisor bits : "); 
for(int i=0; i<divisor_bits; i++)
divisor[i]=Integer.parseInt(br.readLine());
/* 
System.out.print("Data bits are : ");
for(int i=0; i< data_bits; i++)
System.out.print(data[i]); 
System.out.println();
System.out.print("divisor bits are : "); 
for(int i=0; i< divisor_bits; i++)
System.out.print(divisor[i]); 
System.out.println();
*/ 
tot_length=data_bits+divisor_bits-1; 
div=new int[tot_length];
rem=new int[tot_length]; 
crc=new int[tot_length];
/*------------------ CRC GENERATION-----------------------*/
for(int i=0;i<data.length;i++) 
div[i]=data[i];
System.out.print("Dividend (after appending 0's) are : "); 
for(int i=0; i< div.length; i++)
System.out.print(div[i]); 
System.out.println();
for(int j=0; j<div.length; j++){ 
rem[j] = div[j];
}
rem=divide(div, divisor, rem);
for(int i=0;i<div.length;i++) 
//append dividend and remainder
{
crc[i]=(div[i]^rem[i]);
}
System.out.println(); 
System.out.println("CRC code : "); 
for(int i=0;i<crc.length;i++) 
System.out.print(crc[i]);
/*-------------------ERROR DETECTION---------------------*/
System.out.println();
System.out.println("Enter CRC code of "+tot_length+" bits : "); 
for(int i=0; i<crc.length; i++)
crc[i]=Integer.parseInt(br.readLine());
/* 
System.out.print("crc bits are : ");
for(int i=0; i< crc.length; i++)
System.out.print(crc[i]); 
System.out.println();
*/
for(int j=0; j<crc.length; j++){
rem[j] = crc[j];
}
rem=divide(crc, divisor, rem); 
for(int i=0; i< rem.length; i++)
{
if(rem[i]!=0)
{
System.out.println("Error"); 
break;
}
if(i==rem.length-1) 
System.out.println("No Error");
}
System.out.println("THANK YOU.... :)");
}
static int[] divide(int div[],int divisor[], int rem[])
{
int cur=0; 
while(true)
{
for(int i=0;i<divisor.length;i++) 
rem[cur+i]=(rem[cur+i]^divisor[i]);
while(rem[cur]==0 && cur!=rem.length-1) 
cur++;
if((rem.length-cur)<divisor.length) 
break;
}
return rem;
} }

BELLMAN FORD
import java.util.Scanner;
public class BellmanFord
{
private int D[]; 
private int num_ver;
public static final int MAX_VALUE = 999;
public BellmanFord(int num_ver)
{
this.num_ver = num_ver; 
D = new int[num_ver + 1];
}
public void BellmanFordEvaluation(int source, int A[][])
{
for (int node = 1; node <= num_ver; node++)
{
D[node] = MAX_VALUE;
}
D[source] = 0;
for (int node = 1; node <= num_ver - 1; node++)
{
for (int sn = 1; sn <= num_ver; sn++)
{
for (int dn = 1; dn <= num_ver; dn++)
{
if (A[sn][dn] != MAX_VALUE)
{
if (D[dn] > D[sn]+ A[sn][dn])
D[dn] = D[sn] + A[sn][dn];
} } } }
for (int sn = 1; sn <= num_ver; sn++)
{
for (int dn = 1; dn <= num_ver; dn++)
{
if (A[sn][dn] != MAX_VALUE)
{
if (D[dn] > D[sn]+ A[sn][dn])
System.out.println("The Graph contains negative egde cycle");
} } }
for (int vertex = 1; vertex <= num_ver; vertex++)
{
System.out.println("distance of source " + source + " to "+ vertex + " 
is " + D[vertex]);
} }
public static void main(String[ ] args)
{
int num_ver = 0; 
int source;
Scanner scanner = new Scanner(System.in); 
System.out.println("Enter the number of vertices"); 
num_ver = scanner.nextInt();
int A[][] = new int[num_ver + 1][num_ver + 1]; 
System.out.println("Enter the adjacency matrix"); 
for (int sn = 1; sn <= num_ver; sn++)
{
for (int dn = 1; dn <= num_ver; dn++)
{
A[sn][dn] = scanner.nextInt(); 
if (sn == dn)
{
A[sn][dn] = 0; 
continue;
}
if (A[sn][dn] == 0)
{
A[sn][dn] = MAX_VALUE;
} } }
System.out.println("Enter the source vertex"); 
source = scanner.nextInt();
BellmanFord b = new BellmanFord (num_ver); 
b.BellmanFordEvaluation(source, A); 
scanner.close();
} }


LICKY BUCKET
import java.io.*; 
import java.util.*; 
class Queue
{
int q[],f=0,r=0,size; 
void insert(int n)
{
Scanner in = new Scanner(System.in); 
q=new int[10];
for(int i=0;i<n;i++)
{
System.out.print("\nEnter " + i + " element: "); 
int ele=in.nextInt();
if(r+1>10)
{
System.out.println("\nQueue is full \nLost Packet: "+ele); 
break;
}
else
{ } } }
r++;
q[i]=ele;
void delete()
{
Scanner in = new Scanner(System.in); 
Thread t=new Thread();
if(r==0)
System.out.print("\nQueue empty ");
else
{
for(int i=f;i<r;i++)
{
try
{
t.sleep(1000);
}
catch(Exception e){} 
System.out.print("\nLeaked Packet: "+q[i]); 
f++;
} }
System.out.println();
} }
class Leaky extends Thread
{
public static void main(String ar[]) throws Exception
{ }
Queue q=new Queue();
Scanner src=new Scanner(System.in); 
System.out.println("\nEnter the packets to be sent:"); 
int size=src.nextInt();
q.insert(size); 
q.delete();
}


